diff --git a/src/github.com/foundriesio/fioconfig/internal/app.go b/src/github.com/foundriesio/fioconfig/internal/app.go
index 2f10fd9..5c64704 100644
--- a/src/github.com/foundriesio/fioconfig/internal/app.go
+++ b/src/github.com/foundriesio/fioconfig/internal/app.go
@@ -107,7 +107,7 @@ func updateSecret(secretFile string, newContent []byte) (bool, error) {
 		return true, fmt.Errorf("Unable to create %s: %v", tmp, err)
 	}
 	if err := os.Rename(tmp, secretFile); err != nil {
-		return true, fmt.Errorf("Unable to update secret: %s - %w", secretFile, err)
+		return true, fmt.Errorf("Unable to update secret: %s - %v", secretFile, err)
 	}
 	return true, nil
 }
@@ -151,21 +151,21 @@ func safeWrite(input io.ReadCloser, path string, modtime time.Time) error {
 	to, err := os.OpenFile(safepath, os.O_RDWR|os.O_CREATE, 0644)
 	defer to.Close()
 	if err != nil {
-		return fmt.Errorf("Unable to create new secrets: %s - %w", path, err)
+		return fmt.Errorf("Unable to create new secrets: %s - %v", path, err)
 	}
 
 	_, err = io.Copy(to, input)
 	if err != nil {
-		return fmt.Errorf("Unable to copy secrets to: %s - %w", path, err)
+		return fmt.Errorf("Unable to copy secrets to: %s - %v", path, err)
 	}
 
 	if err := os.Rename(safepath, path); err != nil {
-		return fmt.Errorf("Unable to link secrets to: %s - %w", path, err)
+		return fmt.Errorf("Unable to link secrets to: %s - %v", path, err)
 	}
 
 	err = os.Chtimes(path, modtime, modtime)
 	if err != nil {
-		return fmt.Errorf("Unable to set modified time %s - %w", path, err)
+		return fmt.Errorf("Unable to set modified time %s - %v", path, err)
 	}
 	return nil
 }
diff --git a/src/github.com/foundriesio/fioconfig/internal/config.go b/src/github.com/foundriesio/fioconfig/internal/config.go
index bea0b1e..bab9a91 100644
--- a/src/github.com/foundriesio/fioconfig/internal/config.go
+++ b/src/github.com/foundriesio/fioconfig/internal/config.go
@@ -21,7 +21,7 @@ type ConfigFile struct {
 func Unmarshall(ecPriv *ecies.PrivateKey, encFile string) (map[string]*ConfigFile, error) {
 	content, err := ioutil.ReadFile(encFile)
 	if err != nil {
-		return nil, fmt.Errorf("Unable to read encrypted file: %w", err)
+		return nil, fmt.Errorf("Unable to read encrypted file: %v", err)
 	}
 
 	var config map[string]*ConfigFile
diff --git a/src/github.com/foundriesio/fioconfig/main.go b/src/github.com/foundriesio/fioconfig/main.go
index 8926625..c59ba37 100644
--- a/src/github.com/foundriesio/fioconfig/main.go
+++ b/src/github.com/foundriesio/fioconfig/main.go
@@ -1,7 +1,6 @@
 package main
 
 import (
-	"errors"
 	"fmt"
 	"log"
 	"os"
@@ -27,7 +26,7 @@ func extract(c *cli.Context) error {
 	}
 	log.Printf("Extracting keys from %s to %s", app.EncryptedConfig, app.SecretsDir)
 	if err := app.Extract(); err != nil {
-		if errors.Is(err, os.ErrNotExist) {
+		if os.IsNotExist(err) {
 			log.Println("Encrypted config does not exist")
 		} else {
 			return err
@@ -42,7 +41,7 @@ func checkin(c *cli.Context) error {
 		return err
 	}
 	log.Print("Checking in with server")
-	if err := app.CheckIn(); err != nil && !errors.Is(err, internal.NotModifiedError) {
+	if err := app.CheckIn(); err != nil && err != internal.NotModifiedError {
 		return err
 	}
 	return nil
@@ -57,7 +56,7 @@ func daemon(c *cli.Context) error {
 	log.Printf("Running as daemon with interval %d seconds", c.Int("interval"))
 	for {
 		log.Print("Checking in with server")
-		if err := app.CheckIn(); err != nil && !errors.Is(err, internal.NotModifiedError) {
+		if err := app.CheckIn(); err != nil && err != internal.NotModifiedError {
 			log.Println(err)
 		}
 		time.Sleep(interval)
